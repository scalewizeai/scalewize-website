{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/sebkeating/Documents/ScaleWize/Web%20Dev/scalewize-website/src/lib/supabase-client.ts"],"sourcesContent":["import { createBrowserClient } from '@supabase/ssr'\nimport { Database } from '@/types/database'\n\nexport const supabase = createBrowserClient<Database>(\n  process.env.NEXT_PUBLIC_SUPABASE_URL!,\n  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n)\n"],"names":[],"mappings":";;;AAIE;AAJF;AAAA;;AAGO,MAAM,WAAW,CAAA,GAAA,6KAAA,CAAA,sBAAmB,AAAD","debugId":null}},
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["file:///Users/sebkeating/Documents/ScaleWize/Web%20Dev/scalewize-website/src/app/invite/%5Btoken%5D/page.tsx"],"sourcesContent":["'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { supabase } from '@/lib/supabase-client'\nimport { Loader2, CheckCircle, XCircle, Mail, Building2, User } from 'lucide-react'\n\ninterface InvitationData {\n  id: string\n  organization_id: string\n  email: string\n  expires_at: string\n  status: string\n  organization: {\n    name: string\n  }\n  invited_by: {\n    full_name: string\n  }\n}\n\nexport default function InvitePage({ params }: { params: { token: string } }) {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [invitation, setInvitation] = useState<InvitationData | null>(null)\n  const [processing, setProcessing] = useState(false)\n  const [success, setSuccess] = useState(false)\n  const router = useRouter()\n\n  useEffect(() => {\n    validateToken()\n  }, [params.token])\n\n  const validateToken = async () => {\n    try {\n      // Get invitation data\n      const { data: invitationData, error: invitationError } = await supabase\n        .from('organization_invitations')\n        .select(`\n          id,\n          organization_id,\n          email,\n          expires_at,\n          status,\n          organization:organizations(name),\n          invited_by:profiles!organization_invitations_invited_by_fkey(full_name)\n        `)\n        .eq('token', params.token)\n        .eq('status', 'pending')\n        .single()\n\n      if (invitationError || !invitationData) {\n        setError('Invalid or expired invitation link')\n        setLoading(false)\n        return\n      }\n\n      // Check if invitation is expired\n      if (new Date(invitationData.expires_at) < new Date()) {\n        setError('This invitation has expired')\n        setLoading(false)\n        return\n      }\n\n      setInvitation(invitationData)\n      setLoading(false)\n    } catch (error) {\n      console.error('Token validation error:', error)\n      setError('Failed to validate invitation')\n      setLoading(false)\n    }\n  }\n\n  const handleAcceptInvitation = async () => {\n    if (!invitation) return\n\n    setProcessing(true)\n    try {\n      // Check if user is already authenticated\n      const { data: { user } } = await supabase.auth.getUser()\n\n      if (user) {\n        // User is logged in, check if they match the invitation email\n        if (user.email !== invitation.email) {\n          setError('This invitation is for a different email address. Please log out and sign in with the correct account.')\n          setProcessing(false)\n          return\n        }\n\n        // Update user's profile to join the organization\n        await joinOrganization(user.id)\n      } else {\n        // User needs to sign up/sign in\n        // Store invitation data in session storage for after auth\n        sessionStorage.setItem('pendingInvitation', JSON.stringify(invitation))\n        \n        // Redirect to signup with email pre-filled\n        router.push(`/signup?email=${encodeURIComponent(invitation.email)}&invite=true`)\n        return\n      }\n    } catch (error) {\n      console.error('Accept invitation error:', error)\n      setError('Failed to accept invitation')\n      setProcessing(false)\n    }\n  }\n\n  const joinOrganization = async (userId: string) => {\n    try {\n      // Update user's profile to join the organization\n      const { error: profileError } = await supabase\n        .from('profiles')\n        .update({\n          organization_id: invitation!.organization_id,\n          role: 'user' // Default role for invited users\n        })\n        .eq('id', userId)\n\n      if (profileError) {\n        throw profileError\n      }\n\n      // Mark invitation as accepted\n      const { error: invitationError } = await supabase\n        .from('organization_invitations')\n        .update({\n          status: 'accepted',\n          updated_at: new Date().toISOString()\n        })\n        .eq('id', invitation!.id)\n\n      if (invitationError) {\n        console.error('Failed to update invitation status:', invitationError)\n      }\n\n      setSuccess(true)\n      setProcessing(false)\n\n      // Redirect to dashboard after a short delay\n      setTimeout(() => {\n        router.push('/dashboard')\n      }, 2000)\n\n    } catch (error) {\n      console.error('Join organization error:', error)\n      setError('Failed to join organization')\n      setProcessing(false)\n    }\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-blue-600 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-semibold text-gray-900\">Validating invitation...</h2>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"max-w-md w-full bg-white rounded-lg shadow-md p-6\">\n          <div className=\"text-center\">\n            <XCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Invalid Invitation</h2>\n            <p className=\"text-gray-600 mb-6\">{error}</p>\n            <button\n              onClick={() => router.push('/login')}\n              className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors\"\n            >\n              Go to Login\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (success) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"max-w-md w-full bg-white rounded-lg shadow-md p-6\">\n          <div className=\"text-center\">\n            <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Welcome to {invitation?.organization.name}!</h2>\n            <p className=\"text-gray-600 mb-6\">You've successfully joined the organization. Redirecting to dashboard...</p>\n            <Loader2 className=\"h-6 w-6 animate-spin text-blue-600 mx-auto\" />\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full bg-white rounded-lg shadow-md p-6\">\n        <div className=\"text-center mb-6\">\n          <Building2 className=\"h-12 w-12 text-blue-600 mx-auto mb-4\" />\n          <h2 className=\"text-2xl font-bold text-gray-900\">You're Invited!</h2>\n          <p className=\"text-gray-600 mt-2\">Join {invitation?.organization.name} on ScaleWize AI</p>\n        </div>\n\n        <div className=\"space-y-4 mb-6\">\n          <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n            <Mail className=\"h-5 w-5 text-gray-400\" />\n            <div>\n              <p className=\"text-sm font-medium text-gray-900\">{invitation?.email}</p>\n              <p className=\"text-xs text-gray-500\">Invited email address</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n            <User className=\"h-5 w-5 text-gray-400\" />\n            <div>\n              <p className=\"text-sm font-medium text-gray-900\">{invitation?.invited_by.full_name}</p>\n              <p className=\"text-xs text-gray-500\">Invited by</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-3 p-3 bg-gray-50 rounded-lg\">\n            <Building2 className=\"h-5 w-5 text-gray-400\" />\n            <div>\n              <p className=\"text-sm font-medium text-gray-900\">{invitation?.organization.name}</p>\n              <p className=\"text-xs text-gray-500\">Organization</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-3\">\n          <button\n            onClick={handleAcceptInvitation}\n            disabled={processing}\n            className=\"w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center justify-center\"\n          >\n            {processing ? (\n              <>\n                <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                Processing...\n              </>\n            ) : (\n              'Accept Invitation'\n            )}\n          </button>\n\n          <button\n            onClick={() => router.push('/login')}\n            className=\"w-full bg-gray-200 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-300 transition-colors\"\n          >\n            I already have an account\n          </button>\n        </div>\n\n        <div className=\"mt-6 text-center\">\n          <p className=\"text-xs text-gray-500\">\n            This invitation expires on {new Date(invitation?.expires_at || '').toLocaleDateString()}\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}