{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///Users/sebkeating/Documents/ScaleWize/Web%20Dev/scalewize-website/src/app/api/signup-direct/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@supabase/supabase-js'\nimport { Database } from '@/types/database'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password, fullName, organizationName, organizationSlug } = await request.json()\n    \n    // Validate input\n    if (!email || !password || !fullName || !organizationName || !organizationSlug) {\n      return NextResponse.json(\n        { error: 'All fields are required' },\n        { status: 400 }\n      )\n    }\n\n    // Create admin client\n    const supabaseAdmin = createClient<Database>(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!,\n      {\n        auth: {\n          autoRefreshToken: false,\n          persistSession: false\n        }\n      }\n    )\n\n    // Create user account using admin API\n    const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({\n      email,\n      password,\n      email_confirm: true, // Auto-confirm email\n      user_metadata: {\n        full_name: fullName,\n        organization_name: organizationName,\n        organization_slug: organizationSlug,\n      }\n    })\n\n    if (authError) {\n      console.error('Auth creation error:', authError)\n      return NextResponse.json(\n        { error: authError.message },\n        { status: 400 }\n      )\n    }\n\n    if (!authData.user) {\n      return NextResponse.json(\n        { error: 'Failed to create user account' },\n        { status: 500 }\n      )\n    }\n\n    // Create organization\n    const { data: orgData, error: orgError } = await supabaseAdmin\n      .from('organizations')\n      .insert({\n        name: organizationName,\n        domain: organizationSlug,\n        subscription_status: 'trial',\n        plan_type: 'starter',\n        max_users: 50,\n        max_chat_sessions: 1000,\n        monthly_token_limit: 100000,\n        librechat_config: {},\n      })\n      .select()\n      .single()\n\n    if (orgError) {\n      console.error('Organization creation error:', orgError)\n      return NextResponse.json(\n        { error: 'Failed to create organization: ' + orgError.message },\n        { status: 500 }\n      )\n    }\n\n    // Create user profile\n    const { error: profileError } = await supabaseAdmin\n      .from('profiles')\n      .insert({\n        id: authData.user.id,\n        email,\n        full_name: fullName,\n        organization_id: orgData.id,\n        role: 'admin',\n        is_active: true,\n      })\n\n    if (profileError) {\n      console.error('Profile creation error:', profileError)\n      return NextResponse.json(\n        { error: 'Failed to create user profile: ' + profileError.message },\n        { status: 500 }\n      )\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: 'Account created successfully',\n      user: {\n        id: authData.user.id,\n        email: authData.user.email,\n        email_confirmed_at: authData.user.email_confirmed_at\n      },\n      organization: orgData,\n      requiresEmailConfirmation: false\n    })\n\n  } catch (error) {\n    console.error('Direct signup error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAGO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE5F,iBAAiB;QACjB,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,YAAY,CAAC,oBAAoB,CAAC,kBAAkB;YAC9E,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,MAAM,gBAAgB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,gFAE/B,QAAQ,GAAG,CAAC,yBAAyB,EACrC;YACE,MAAM;gBACJ,kBAAkB;gBAClB,gBAAgB;YAClB;QACF;QAGF,sCAAsC;QACtC,MAAM,EAAE,MAAM,QAAQ,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,cAAc,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;YACrF;YACA;YACA,eAAe;YACf,eAAe;gBACb,WAAW;gBACX,mBAAmB;gBACnB,mBAAmB;YACrB;QACF;QAEA,IAAI,WAAW;YACb,QAAQ,KAAK,CAAC,wBAAwB;YACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,UAAU,OAAO;YAAC,GAC3B;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,SAAS,IAAI,EAAE;YAClB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAgC,GACzC;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,MAAM,EAAE,MAAM,OAAO,EAAE,OAAO,QAAQ,EAAE,GAAG,MAAM,cAC9C,IAAI,CAAC,iBACL,MAAM,CAAC;YACN,MAAM;YACN,QAAQ;YACR,qBAAqB;YACrB,WAAW;YACX,WAAW;YACX,mBAAmB;YACnB,qBAAqB;YACrB,kBAAkB,CAAC;QACrB,GACC,MAAM,GACN,MAAM;QAET,IAAI,UAAU;YACZ,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,oCAAoC,SAAS,OAAO;YAAC,GAC9D;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,MAAM,EAAE,OAAO,YAAY,EAAE,GAAG,MAAM,cACnC,IAAI,CAAC,YACL,MAAM,CAAC;YACN,IAAI,SAAS,IAAI,CAAC,EAAE;YACpB;YACA,WAAW;YACX,iBAAiB,QAAQ,EAAE;YAC3B,MAAM;YACN,WAAW;QACb;QAEF,IAAI,cAAc;YAChB,QAAQ,KAAK,CAAC,2BAA2B;YACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,oCAAoC,aAAa,OAAO;YAAC,GAClE;gBAAE,QAAQ;YAAI;QAElB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,MAAM;gBACJ,IAAI,SAAS,IAAI,CAAC,EAAE;gBACpB,OAAO,SAAS,IAAI,CAAC,KAAK;gBAC1B,oBAAoB,SAAS,IAAI,CAAC,kBAAkB;YACtD;YACA,cAAc;YACd,2BAA2B;QAC7B;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}