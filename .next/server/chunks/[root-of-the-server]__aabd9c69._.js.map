{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///Users/sebkeating/Documents/ScaleWize/Web%20Dev/scalewize-website/src/app/api/signup-simple/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { cookies } from 'next/headers'\nimport { Database } from '@/types/database'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password, fullName, organizationName, organizationSlug } = await request.json()\n    \n    // Validate input\n    if (!email || !password || !fullName || !organizationName || !organizationSlug) {\n      return NextResponse.json(\n        { error: 'All fields are required' },\n        { status: 400 }\n      )\n    }\n\n    const cookieStore = await cookies()\n    const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })\n\n    // Create user account\n    const { data: authData, error: authError } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          full_name: fullName,\n          organization_name: organizationName,\n          organization_slug: organizationSlug,\n        }\n      }\n    })\n\n    if (authError) {\n      return NextResponse.json(\n        { error: authError.message },\n        { status: 400 }\n      )\n    }\n\n    if (!authData.user) {\n      return NextResponse.json(\n        { error: 'Failed to create user account' },\n        { status: 500 }\n      )\n    }\n\n    // If user is immediately authenticated, create organization and profile\n    if (authData.session) {\n      try {\n        // Create organization\n        const { data: orgData, error: orgError } = await supabase\n          .from('organizations')\n          .insert({\n            name: organizationName,\n            domain: organizationSlug,\n            subscription_status: 'trial',\n            plan_type: 'starter',\n            max_users: 50,\n            max_chat_sessions: 1000,\n            monthly_token_limit: 100000,\n            librechat_config: {},\n          })\n          .select()\n          .single()\n\n        if (orgError) {\n          console.error('Organization creation error:', orgError)\n          return NextResponse.json(\n            { error: 'Failed to create organization: ' + orgError.message },\n            { status: 500 }\n          )\n        }\n\n        // Create user profile\n        const { error: profileError } = await supabase\n          .from('profiles')\n          .insert({\n            id: authData.user.id,\n            email,\n            full_name: fullName,\n            organization_id: orgData.id,\n            role: 'admin',\n            is_active: true,\n          })\n\n        if (profileError) {\n          console.error('Profile creation error:', profileError)\n          return NextResponse.json(\n            { error: 'Failed to create user profile: ' + profileError.message },\n            { status: 500 }\n          )\n        }\n\n        return NextResponse.json({\n          success: true,\n          message: 'Account created successfully',\n          user: authData.user,\n          organization: orgData,\n          requiresEmailConfirmation: false\n        })\n      } catch (error) {\n        console.error('Database operation error:', error)\n        return NextResponse.json(\n          { error: 'Failed to complete account setup' },\n          { status: 500 }\n        )\n      }\n    } else {\n      // Email confirmation required\n      return NextResponse.json({\n        success: true,\n        message: 'Please check your email to confirm your account before continuing.',\n        user: authData.user,\n        requiresEmailConfirmation: true\n      })\n    }\n\n  } catch (error) {\n    console.error('Signup API error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}