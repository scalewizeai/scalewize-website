{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///Users/sebkeating/Documents/ScaleWize/Web%20Dev/scalewize-website/src/app/api/invite-admin/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { createClient } from '@supabase/supabase-js'\nimport { Database } from '@/types/database'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, organizationId, userId } = await request.json()\n    \n    // Validate input\n    if (!email || !organizationId || !userId) {\n      return NextResponse.json(\n        { error: 'Email, organization ID, and user ID are required' },\n        { status: 400 }\n      )\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    if (!emailRegex.test(email)) {\n      return NextResponse.json(\n        { error: 'Invalid email format' },\n        { status: 400 }\n      )\n    }\n\n    // Create admin client using service role\n    const supabaseAdmin = createClient<Database>(\n      process.env.NEXT_PUBLIC_SUPABASE_URL!,\n      process.env.SUPABASE_SERVICE_ROLE_KEY!,\n      {\n        auth: {\n          autoRefreshToken: false,\n          persistSession: false\n        }\n      }\n    )\n\n    // Check if user is admin of the organization using service role\n    const { data: profile, error: profileError } = await supabaseAdmin\n      .from('profiles')\n      .select('*')\n      .eq('id', userId)\n      .eq('organization_id', organizationId)\n      .in('role', ['admin', 'super_admin'])\n      .single()\n\n    if (profileError || !profile) {\n      return NextResponse.json(\n        { error: 'You must be an admin to invite users' },\n        { status: 403 }\n      )\n    }\n\n    // Check if user is already a member\n    const { data: existingMember } = await supabaseAdmin\n      .from('profiles')\n      .select('id')\n      .eq('email', email)\n      .eq('organization_id', organizationId)\n      .single()\n\n    if (existingMember) {\n      return NextResponse.json(\n        { error: 'User is already a member of this organization' },\n        { status: 400 }\n      )\n    }\n\n    // Check if invitation already exists and is pending\n    const { data: existingInvitation } = await supabaseAdmin\n      .from('organization_invitations')\n      .select('id')\n      .eq('email', email)\n      .eq('organization_id', organizationId)\n      .eq('status', 'pending')\n      .single()\n\n    if (existingInvitation) {\n      return NextResponse.json(\n        { error: 'An invitation is already pending for this email' },\n        { status: 400 }\n      )\n    }\n\n    // Generate secure token\n    const token = crypto.randomUUID()\n    const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 days\n\n    // Create invitation record using service role\n    const { data: invitation, error: invitationError } = await supabaseAdmin\n      .from('organization_invitations')\n      .insert({\n        organization_id: organizationId,\n        email,\n        invited_by: userId,\n        token,\n        expires_at: expiresAt.toISOString(),\n        status: 'pending'\n      })\n      .select()\n      .single()\n\n    if (invitationError) {\n      console.error('Invitation creation error:', invitationError)\n      return NextResponse.json(\n        { error: 'Failed to create invitation' },\n        { status: 500 }\n      )\n    }\n\n    // Get organization details for email\n    const { data: organization } = await supabaseAdmin\n      .from('organizations')\n      .select('name')\n      .eq('id', organizationId)\n      .single()\n\n    // Send invitation email (you'll need to implement this)\n    // For now, we'll just return the invitation data\n    const inviteUrl = `${process.env.NEXT_PUBLIC_APP_URL}/invite/${token}`\n\n    // TODO: Implement email sending\n    // await sendInvitationEmail(email, inviteUrl, organization?.name, profile.full_name)\n\n    return NextResponse.json({\n      success: true,\n      message: 'Invitation sent successfully',\n      data: {\n        id: invitation.id,\n        email: invitation.email,\n        expires_at: invitation.expires_at,\n        invite_url: inviteUrl\n      }\n    })\n\n  } catch (error) {\n    console.error('Admin invitation API error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}