{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///Users/sebkeating/Documents/ScaleWize/Web%20Dev/scalewize-website/src/app/api/invite/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'\nimport { cookies } from 'next/headers'\nimport { Database } from '@/types/database'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, organizationId } = await request.json()\n    \n    // Validate input\n    if (!email || !organizationId) {\n      return NextResponse.json(\n        { error: 'Email and organization ID are required' },\n        { status: 400 }\n      )\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    if (!emailRegex.test(email)) {\n      return NextResponse.json(\n        { error: 'Invalid email format' },\n        { status: 400 }\n      )\n    }\n\n    // Fix for Next.js 15: await cookies() before using\n    const cookieStore = await cookies()\n    const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })\n\n    // Get current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    if (authError || !user) {\n      return NextResponse.json(\n        { error: 'Unauthorized' },\n        { status: 401 }\n      )\n    }\n\n    // Check if user is admin of the organization\n    const { data: profile, error: profileError } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', user.id)\n      .eq('organization_id', organizationId)\n      .in('role', ['admin', 'super_admin'])\n      .single()\n\n    if (profileError || !profile) {\n      return NextResponse.json(\n        { error: 'You must be an admin to invite users' },\n        { status: 403 }\n      )\n    }\n\n    // Check if user is already a member\n    const { data: existingMember } = await supabase\n      .from('profiles')\n      .select('id')\n      .eq('email', email)\n      .eq('organization_id', organizationId)\n      .single()\n\n    if (existingMember) {\n      return NextResponse.json(\n        { error: 'User is already a member of this organization' },\n        { status: 400 }\n      )\n    }\n\n    // Check if invitation already exists and is pending\n    const { data: existingInvitation } = await supabase\n      .from('organization_invitations')\n      .select('id')\n      .eq('email', email)\n      .eq('organization_id', organizationId)\n      .eq('status', 'pending')\n      .single()\n\n    if (existingInvitation) {\n      return NextResponse.json(\n        { error: 'An invitation is already pending for this email' },\n        { status: 400 }\n      )\n    }\n\n    // Generate secure token\n    const token = crypto.randomUUID()\n    const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000) // 7 days\n\n    // Create invitation record\n    const { data: invitation, error: invitationError } = await supabase\n      .from('organization_invitations')\n      .insert({\n        organization_id: organizationId,\n        email,\n        invited_by: user.id,\n        token,\n        expires_at: expiresAt.toISOString(),\n        status: 'pending'\n      })\n      .select()\n      .single()\n\n    if (invitationError) {\n      console.error('Invitation creation error:', invitationError)\n      return NextResponse.json(\n        { error: 'Failed to create invitation' },\n        { status: 500 }\n      )\n    }\n\n    // Get organization details for email\n    const { data: organization } = await supabase\n      .from('organizations')\n      .select('name')\n      .eq('id', organizationId)\n      .single()\n\n    // Send invitation email (you'll need to implement this)\n    // For now, we'll just return the invitation data\n    const inviteUrl = `${process.env.NEXT_PUBLIC_APP_URL}/invite/${token}`\n\n    // TODO: Implement email sending\n    // await sendInvitationEmail(email, inviteUrl, organization?.name, profile.full_name)\n\n    return NextResponse.json({\n      success: true,\n      message: 'Invitation sent successfully',\n      data: {\n        id: invitation.id,\n        email: invitation.email,\n        expires_at: invitation.expires_at,\n        invite_url: inviteUrl\n      }\n    })\n\n  } catch (error) {\n    console.error('Invitation API error:', error)\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    )\n  }\n}\n\n// Rate limiting middleware (basic implementation)\nconst rateLimit = new Map<string, { count: number; resetTime: number }>()\n\nfunction checkRateLimit(userId: string): boolean {\n  const now = Date.now()\n  const windowMs = 60 * 60 * 1000 // 1 hour\n  const maxRequests = 10 // 10 invites per hour\n\n  const userLimit = rateLimit.get(userId)\n  \n  if (!userLimit || now > userLimit.resetTime) {\n    rateLimit.set(userId, { count: 1, resetTime: now + windowMs })\n    return true\n  }\n\n  if (userLimit.count >= maxRequests) {\n    return false\n  }\n\n  userLimit.count++\n  return true\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}